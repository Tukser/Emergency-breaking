
Emergency_breaking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000197  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000106  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000118  00000000  00000000  00000477  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e3  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000006e  00000000  00000000  000007d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 76 00 	call	0xec	; 0xec <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initializzation_pin>:
    }
}

void initializzation_pin(void)
{
	DDRB|= (1<<PB0) | (1<<PB1) | (1<<PB2);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 60       	ori	r24, 0x07	; 7
  84:	84 b9       	out	0x04, r24	; 4
	PORTB&= ~(1<<PB0) & ~(1<<PB1) & ~(1<<PB2);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	88 7f       	andi	r24, 0xF8	; 248
  8a:	85 b9       	out	0x05, r24	; 5
	
	DDRD|= (1<<PD6) | (1<<PD7);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	80 6c       	ori	r24, 0xC0	; 192
  90:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PD6) | ~(1<<PD7);
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	8b b9       	out	0x0b, r24	; 11
  96:	08 95       	ret

00000098 <stop_button>:
}

void stop_button(_Signal_control *s_signal_control)
{
	DDRC &= ~(1<<PC0);
  98:	38 98       	cbi	0x07, 0	; 7
	PORTC &= ~(1<<PC0);
  9a:	40 98       	cbi	0x08, 0	; 8
	cli();
  9c:	f8 94       	cli
	if (INPUT_SIGNAL==1)
  9e:	30 9b       	sbis	0x06, 0	; 6
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <stop_button+0xe>
		INDICATOR_ON;
  a2:	28 9a       	sbi	0x05, 0	; 5
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <stop_button+0x10>
	else
		INDICATOR_OFF;				
  a6:	28 98       	cbi	0x05, 0	; 5
	sei();
  a8:	78 94       	sei
  aa:	08 95       	ret

000000ac <initialization_timer_pwm>:
}

//PWM use on timer2
void initialization_timer_pwm(_Signal_control *s_signal_control)
{
	TCCR1A=(1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0);
  ac:	80 ef       	ldi	r24, 0xF0	; 240
  ae:	80 93 80 00 	sts	0x0080, r24
	TCCR1B=(1<<CS00)|(1<<WGM10);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 81 00 	sts	0x0081, r24
	
	TCNT1 |= 0x00;
  b8:	e4 e8       	ldi	r30, 0x84	; 132
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	91 81       	ldd	r25, Z+1	; 0x01
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24
	ICR1 |= 0x50;
  c4:	e6 e8       	ldi	r30, 0x86	; 134
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	91 81       	ldd	r25, Z+1	; 0x01
  cc:	80 65       	ori	r24, 0x50	; 80
  ce:	91 83       	std	Z+1, r25	; 0x01
  d0:	80 83       	st	Z, r24
	
	OCR1A=0x50;
  d2:	80 e5       	ldi	r24, 0x50	; 80
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 89 00 	sts	0x0089, r25
  da:	80 93 88 00 	sts	0x0088, r24
	OCR1B=0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 8b 00 	sts	0x008B, r25
  e6:	80 93 8a 00 	sts	0x008A, r24
  ea:	08 95       	ret

000000ec <main>:
#include "Emergency_breaking.h"

void warning_signal(void);

int main(void)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <main+0x6>
  f2:	00 d0       	rcall	.+0      	; 0xf4 <main+0x8>
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	_Signal_control s_main_signal_control;
	
	s_main_signal_control.lowSignalStop = 0x00;
  f8:	19 82       	std	Y+1, r1	; 0x01
	s_main_signal_control.highSignalStop = 0x00;
  fa:	1a 82       	std	Y+2, r1	; 0x02
	
	s_main_signal_control.lowSignalStopPush = 0xFF; 
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8b 83       	std	Y+3, r24	; 0x03
	s_main_signal_control.highSignalStopPush = 0x64;
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	8c 83       	std	Y+4, r24	; 0x04
		
	initialization_timer_pwm(&s_main_signal_control);
 104:	ce 01       	movw	r24, r28
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	0e 94 56 00 	call	0xac	; 0xac <initialization_timer_pwm>
	initializzation_pin();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <initializzation_pin>
    while(1)
    {
		stop_button(&s_main_signal_control);
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	0e 94 4c 00 	call	0x98	; 0x98 <stop_button>
 118:	fb cf       	rjmp	.-10     	; 0x110 <main+0x24>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
